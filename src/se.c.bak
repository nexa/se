/* 20111008

   spider engine

   search engine prototype
*/
#include <assert.h>
#include <stdio.h>
#incldue <stdlib.h>
#include <errno.h>
#include <string.h>
#include <strings.h>
#include <netinet/in.h>
#include <sys/types.h>
#include <sys/socket.h>

#include "event.h"
#include "spiders.h"

#define SPIDERS 20
#define BACKLOG 5

typedef struct sockaddr SA;

struct event_base *base;
spiders_t *spiders;

#define msg(msg) printf("%s\n", msg);
#define err_msg(msg) printf("Error: %s\n%s\n", msg, strerror(errno))
#define err_exit(msg) printf("Error: %s\n%s\n", msg, strerror(errno));\
  exit(0)

void on_send_request(int sock, short event, void *arg)
{

}

void on_recv_response(int sock, short event, void* arg)
{

}

void on_accept(int sock, short event, void* arg)
{

}

int main(int argc, char **argv)
{
  int listen_sock;
  struct sockaddr_in sa;
  spiders_t spiders;

  base = event_base_new();
  spiders_init(&spiders, SPIDERS);

  if ((listen_sock = socket(AF_INET, SOCK_STREAM, 0)) < 0)
    {
      err_exit("se socket");
    }
  bzero(&sa, sizeof(sa));
  sa.sin_family = AF_INET;
  sa.sin_port = htons(PORT);
  sa.sin_addr.s_addr = htonl(INADDR_ANY);
  if (bind(listen_sock, (SA*)&sa, sizeof(sa)) < 0)
    {
      err_exit("se bind");
    }
  if (listen(listen_sock, BACKLOG) < 0)
    {
      err_exit("se listen");
    }

  event_set(spiders.listen_event, listen_sock, EV_READ | EV_PERSIST, on_accept, NULL);
  event_base_set(base, spiders.listen_event);
  event_add(spiders.listen_event, NULL);
  event_base_dispatch(base);
 
  spiders_clear(&spiders);

  exit(0);
}
